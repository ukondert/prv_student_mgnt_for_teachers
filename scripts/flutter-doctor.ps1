# Flutter Doctor Script - Environment Validation
# Pr√ºft die Flutter-Entwicklungsumgebung auf Vollst√§ndigkeit

param(
    [switch]$Verbose,
    [switch]$Fix,
    [string]$FlutterChannel = "stable"
)

Write-Host "üöÄ Flutter Environment Validation" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green

# Flutter Installation pr√ºfen
Write-Host "`nüì± Flutter Installation pr√ºfen..." -ForegroundColor Yellow

try {
    $flutterVersion = flutter --version
    Write-Host "‚úÖ Flutter ist installiert" -ForegroundColor Green
    
    if ($Verbose) {
        Write-Host $flutterVersion -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Flutter ist nicht installiert oder nicht im PATH" -ForegroundColor Red
    Write-Host "Installieren Sie Flutter von: https://flutter.dev/docs/get-started/install" -ForegroundColor Yellow
    
    if ($Fix) {
        Write-Host "Automatische Installation wird nicht unterst√ºtzt. Bitte manuell installieren." -ForegroundColor Yellow
    }
    exit 1
}

# Flutter Doctor ausf√ºhren
Write-Host "`nüîç Flutter Doctor ausf√ºhren..." -ForegroundColor Yellow
flutter doctor -v

# Dart Installation pr√ºfen
Write-Host "`nüì¶ Dart Installation pr√ºfen..." -ForegroundColor Yellow

try {
    $dartVersion = dart --version
    Write-Host "‚úÖ Dart ist verf√ºgbar" -ForegroundColor Green
    
    if ($Verbose) {
        Write-Host $dartVersion -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Dart ist nicht verf√ºgbar" -ForegroundColor Red
}

# Android Studio / Android SDK pr√ºfen
Write-Host "`nü§ñ Android Development pr√ºfen..." -ForegroundColor Yellow

$androidSdkPath = $env:ANDROID_HOME
if ($androidSdkPath -and (Test-Path $androidSdkPath)) {
    Write-Host "‚úÖ Android SDK gefunden: $androidSdkPath" -ForegroundColor Green
    
    # Android SDK Tools pr√ºfen
    $adbPath = Join-Path $androidSdkPath "platform-tools\adb.exe"
    if (Test-Path $adbPath) {
        Write-Host "‚úÖ Android Debug Bridge (ADB) verf√ºgbar" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è ADB nicht gefunden" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ùå Android SDK nicht gefunden (ANDROID_HOME nicht gesetzt)" -ForegroundColor Red
    Write-Host "Setzen Sie ANDROID_HOME Environment Variable" -ForegroundColor Yellow
}

# Xcode pr√ºfen (nur auf macOS relevant, aber Info geben)
Write-Host "`nüçé iOS Development (Xcode)..." -ForegroundColor Yellow
Write-Host "‚ÑπÔ∏è Xcode ist nur auf macOS verf√ºgbar f√ºr iOS-Entwicklung" -ForegroundColor Cyan

# VS Code und Extensions pr√ºfen
Write-Host "`nüíª VS Code und Flutter Extensions pr√ºfen..." -ForegroundColor Yellow

try {
    $vsCodeVersion = code --version
    Write-Host "‚úÖ VS Code ist installiert" -ForegroundColor Green
    
    # Flutter Extension pr√ºfen
    $extensions = code --list-extensions
    
    if ($extensions -contains "Dart-Code.dart-code") {
        Write-Host "‚úÖ Dart Extension installiert" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Dart Extension nicht installiert" -ForegroundColor Red
        if ($Fix) {
            Write-Host "Installing Dart Extension..." -ForegroundColor Yellow
            code --install-extension Dart-Code.dart-code
        }
    }
    
    if ($extensions -contains "Dart-Code.flutter") {
        Write-Host "‚úÖ Flutter Extension installiert" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Flutter Extension nicht installiert" -ForegroundColor Red
        if ($Fix) {
            Write-Host "Installing Flutter Extension..." -ForegroundColor Yellow
            code --install-extension Dart-Code.flutter
        }
    }
    
} catch {
    Write-Host "‚ùå VS Code ist nicht installiert oder nicht im PATH" -ForegroundColor Red
}

# Git pr√ºfen
Write-Host "`nüìã Git Installation pr√ºfen..." -ForegroundColor Yellow

try {
    $gitVersion = git --version
    Write-Host "‚úÖ Git ist installiert" -ForegroundColor Green
    
    if ($Verbose) {
        Write-Host $gitVersion -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ùå Git ist nicht installiert" -ForegroundColor Red
    Write-Host "Installieren Sie Git von: https://git-scm.com/" -ForegroundColor Yellow
}

# Flutter Channel pr√ºfen
Write-Host "`nüîÑ Flutter Channel pr√ºfen..." -ForegroundColor Yellow

$currentChannel = flutter channel | Where-Object { $_ -match "^\*" } | ForEach-Object { $_.Replace("* ", "") }
Write-Host "Aktueller Channel: $currentChannel" -ForegroundColor Cyan

if ($currentChannel -ne $FlutterChannel) {
    Write-Host "‚ö†Ô∏è Flutter l√§uft auf '$currentChannel', empfohlen ist '$FlutterChannel'" -ForegroundColor Yellow
    
    if ($Fix) {
        Write-Host "Wechsle zu $FlutterChannel Channel..." -ForegroundColor Yellow
        flutter channel $FlutterChannel
        flutter upgrade
    }
}

# Pub Global Packages pr√ºfen
Write-Host "`nüì¶ Wichtige Flutter Packages pr√ºfen..." -ForegroundColor Yellow

$globalPackages = flutter pub global list

# Empfohlene Global Packages
$recommendedPackages = @(
    "flutter_gen",
    "dart_code_metrics",
    "import_sorter"
)

foreach ($package in $recommendedPackages) {
    if ($globalPackages -match $package) {
        Write-Host "‚úÖ $package ist global installiert" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è $package ist nicht global installiert" -ForegroundColor Yellow
        
        if ($Fix) {
            Write-Host "Installiere $package..." -ForegroundColor Yellow
            flutter pub global activate $package
        }
    }
}

# Connected Devices pr√ºfen
Write-Host "`nüì± Verbundene Ger√§te pr√ºfen..." -ForegroundColor Yellow

$devices = flutter devices
Write-Host $devices -ForegroundColor Gray

if ($devices -match "No devices detected") {
    Write-Host "‚ö†Ô∏è Keine Ger√§te oder Emulatoren erkannt" -ForegroundColor Yellow
    Write-Host "Starten Sie einen Android Emulator oder verbinden Sie ein Ger√§t" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Ger√§te/Emulatoren verf√ºgbar" -ForegroundColor Green
}

# Performance Checks
Write-Host "`n‚ö° Performance Checks..." -ForegroundColor Yellow

# Verf√ºgbarer Speicher
$memory = Get-CimInstance -ClassName Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum
$totalMemoryGB = [math]::Round($memory.Sum / 1GB, 2)

Write-Host "RAM: $totalMemoryGB GB" -ForegroundColor Cyan

if ($totalMemoryGB -lt 8) {
    Write-Host "‚ö†Ô∏è Weniger als 8 GB RAM - Flutter Entwicklung k√∂nnte langsam sein" -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Ausreichend RAM f√ºr Flutter Entwicklung" -ForegroundColor Green
}

# Zusammenfassung
Write-Host "`nüìä Zusammenfassung" -ForegroundColor Green
Write-Host "=================" -ForegroundColor Green

Write-Host "Flutter Environment Check abgeschlossen!" -ForegroundColor Green

if ($Fix) {
    Write-Host "`nWenn --Fix verwendet wurde, f√ºhren Sie das Script erneut aus um √Ñnderungen zu √ºberpr√ºfen." -ForegroundColor Yellow
}

Write-Host "`nüöÄ N√§chste Schritte:" -ForegroundColor Cyan
Write-Host "1. Beheben Sie alle roten (‚ùå) Issues" -ForegroundColor White
Write-Host "2. Installieren Sie fehlende Extensions in VS Code" -ForegroundColor White
Write-Host "3. Starten Sie einen Android Emulator oder verbinden Sie ein Ger√§t" -ForegroundColor White
Write-Host "4. Erstellen Sie ein neues Flutter Projekt: flutter create my_app" -ForegroundColor White

Write-Host "`nüìö Hilfreiche Links:" -ForegroundColor Cyan
Write-Host "- Flutter Docs: https://flutter.dev/docs" -ForegroundColor Blue
Write-Host "- Dart Docs: https://dart.dev/guides" -ForegroundColor Blue
Write-Host "- VS Code Flutter: https://flutter.dev/docs/development/tools/vs-code" -ForegroundColor Blue
